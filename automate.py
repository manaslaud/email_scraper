from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import time
# import random         ///if needed can use random.choice()

proxies = [
# "41.173.24.38:80",
    # "43.134.32.184:3128",
    # "43.133.59.220:3128",
    "46.47.197.210:3128",
    "159.203.61.169:3128",
    "164.163.185.199:80",
    "183.100.14.134:8000",
    "158.255.77.169:80",
    "102.130.125.86:80",
    "51.254.78.223:80",
    "85.214.107.177:80",
    "45.119.133.218:3128",
    "89.145.162.81:3128",
    "84.39.112.144:3128",
    "41.59.90.171:80",
    "91.92.155.207:3128",
    "160.202.42.156:80",
    "202.137.31.186:8080",
    "27.72.244.228:8080",
    "190.94.212.221:999",
    "103.168.254.162:8086",
    "103.174.81.10:80",
    "129.213.89.36:80",
    "23.94.136.205:80",
    "23.82.137.157:80",
    "213.233.177.134:80",
    "189.43.42.96:80",
    "192.73.244.36:80",
    "198.49.68.80:80",
    "149.102.130.120:80",
    "67.43.228.253:12915",
    "85.215.64.49:80",
    "60.242.169.0:80",
    "209.97.150.167:3128",
    "162.223.90.130:80",
    "67.43.228.252:10579",
    "155.94.241.133:3128",
    "67.43.227.226:30373",
    "4.175.200.138:8080",
    "155.54.239.64:80",
    "196.41.230.90:8080",
    "103.127.1.130:80",
    "155.94.241.132:3128",
    "198.199.86.11:8080",
    "188.75.79.14:80",
    "139.59.1.14:8080",
    "155.94.241.134:3128",
    "67.43.236.19:17293",
    "41.204.53.20:80",
    "161.35.70.249:8080",
    "144.126.216.57:80",
    "133.18.234.13:80",
    "139.162.78.109:8080",
    "41.204.53.30:80",
    "138.68.60.8:8080",
    "47.252.29.28:11222",
    "68.183.143.134:80",
    "97.74.87.226:80",
    "87.248.129.26:80",
    "66.29.154.103:3128",
    "119.9.153.99:80",
    "8.219.97.248:80",
    "188.40.59.208:3128",
    "194.182.163.117:3128",
    "51.89.255.67:80",
    "47.74.152.29:8888",
    "20.111.54.16:8123",
    "159.65.245.255:80",
    "83.68.136.236:80",
    "178.128.199.145:80",
    "54.227.39.204:80",
    "203.115.101.53:80",
    "50.217.226.41:80",
    "203.115.101.55:80",
    "41.204.53.28:80",
    "50.207.199.86:80",
    "50.217.226.44:80",
    "0.0.0.0:80",
    "50.172.75.122:80",
    "50.172.75.120:80",
    "211.128.96.206:80",
    "20.24.43.214:80",
    "68.185.57.66:80",
    "50.172.75.114:80",
    "50.231.104.58:80",
    "50.174.7.156:80",
    "50.207.199.81:80",
    "20.206.106.192:8123",
    "127.0.0.7:80",
    "20.210.113.32:8123",
    "38.242.244.29:80",
    "180.254.148.151:8080",
    "95.216.208.103:8118",
    "45.173.7.10:999",
    "190.14.251.108:999",
    "36.95.249.157:8080",
    "103.130.5.34:8080",
    "197.255.125.12:80",
    "138.68.235.51:80",
    "66.29.154.105:3128",
    "47.56.110.204:8989",
    "93.127.215.97:80",
    "175.139.233.79:80",
    "91.65.103.3:80",
    "102.134.130.41:80",
    "13.80.134.180:80",
    "47.242.47.64:8888",
    "116.125.141.115:80",
    "191.101.80.162:80",
    "178.16.139.143:80",
    "195.114.209.50:80",
    "31.47.58.37:80",
    "43.153.207.93:3128",
    "43.134.229.98:3128",
    "47.241.43.44:7777",
    "198.44.255.5:80",
    "20.27.86.185:8080",
    "198.74.51.79:8888",
    "129.226.193.16:3128",
    "143.42.66.91:80",
    "147.45.73.176:8443",
    "65.108.207.6:80",
    "67.43.236.18:1853",
    "87.98.148.98:80",
    "178.128.113.118:23128",
    "198.44.255.3:80",
    "155.94.241.131:3128",
    "51.210.54.186:80",
    "41.204.53.21:80",
    "23.247.136.245:80",
    "27.254.46.194:80",
    "185.164.73.117:80",
    "38.6.182.13:8080",
    "67.43.236.21:8307",
    "15.235.153.57:8089",
    "199.195.253.14:1080",
    "154.65.39.7:80",
    "178.128.49.89:8888",
    "43.134.33.254:3128",
    "114.129.2.82:8081",
    "196.1.95.124:80",
    "190.103.177.131:80",
    "195.123.240.138:7777",
    "121.126.235.153:6565",
    "156.228.109.79:3128",
    "121.126.218.193:6557",
    "156.228.81.144:3128",
    "156.228.76.132:3128",
    "104.207.32.54:3128",
    "104.207.61.217:3128",
    "156.228.88.12:3128",
    "156.228.104.76:3128",
    "156.228.84.119:3128",
    "156.228.82.6:3128",
    "156.228.108.29:3128",
    "104.207.52.55:3128",
    "104.207.55.228:3128",
    "156.228.104.82:3128",
    "156.228.83.141:3128",
    "104.207.51.151:3128",
    "156.228.77.152:3128",
    "104.207.33.39:3128",
    "156.228.101.70:3128",
    "156.228.83.44:3128",
    "103.174.81.21:80",
    "43.159.223.89:3128",
    "178.62.35.75:80",
    "118.114.77.47:8081",
    "129.154.58.123:80",
    "118.107.44.181:80",
    "161.35.109.113:80",
    "146.190.240.213:3128",
    "173.212.209.192:3128",
    "144.24.212.85:3128",
    "51.195.101.136:3128",
    "116.202.236.21:10800",
    "8.219.97.249:80",
    "139.59.69.9:80",
    "116.202.203.233:8080",
    "154.82.101.122:3128",
    "104.207.54.241:3128",
    "104.207.60.78:3128",
    "156.228.83.146:3128",
    "104.207.51.101:3128",
    "156.228.82.55:3128",
    "50.207.199.83:80",
    "176.36.138.234:8080",
    "194.54.183.82:80",
    "193.150.117.32:3128",
    "156.228.105.59:3128",
    "154.16.180.182:80",
    "143.198.230.87:8080",
    "109.238.222.10:3128",
    "103.153.144.197:8081",
    "102.130.127.154:80",
    "176.98.75.120:80",
    "47.74.152.29:8888",
    "122.237.108.233:80",
    "91.67.180.90:3128",
    "47.252.29.28:11222",
    "37.143.12.114:8080",
    "68.183.147.183:80",
    "172.104.91.248:8080",
    "129.213.89.36:80",
    "102.130.127.155:80",
    "91.67.180.90:3128",
    "176.98.75.120:80",
    "122.237.108.233:80",
    "156.228.110.208:3128",
    "156.228.110.104:3128",
    "172.104.91.248:8080",
    "172.104.61.64:8080",
    "149.129.224.127:3128",
    "8.219.97.248:80"]

seedKey = "manas"
available = []
proxy_index = 0 

def get_next_proxy():
    global proxy_index
    proxy = proxies[proxy_index]
    proxy_index = (proxy_index + 1) % len(proxies)  
    return proxy


def generateKeys():
    usernames = []
    usernames.append(seedKey)  
    usernames.append(seedKey.lower())  

    for i in range(1, 9):  
        usernames.append(f"{seedKey}{i}") 
        usernames.append(f"{i}{seedKey}")  
    
    suffixes = ['_123', '_xyz', '1234', '2024']
    prefixes = ['user_', 'member_']
    
    for suffix in suffixes:
        usernames.append(f"{seedKey}{suffix}") 
    
    for prefix in prefixes:
        usernames.append(f"{prefix}{seedKey}")
         
    from random import choice
    variations = [f"{seedKey}{choice(['123', 'abc'])}",
                  f"{choice(['super', 'mega'])}_{seedKey}"]
    
    usernames.extend(variations)  
    
    return list(set(usernames))  

def clearInput(input_field):
    input_field.clear()  
    input_field.send_keys(Keys.CONTROL + "a") 
    input_field.send_keys(Keys.BACKSPACE) 

def sendInput(input_field, input):
    input_field.send_keys(input)
    time.sleep(5)

def waitAndCheck(driver, input1):
    try:
        parent_element = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, '[data-component="slug-status"]'))
        )
        child_div = parent_element.find_element(By.XPATH, './div') 
        content = child_div.text
          
        if content == 'unavailable':
            available.append(input1)
            return available

        return content
    except Exception as e:
        print("Invalid Element ",str(e))
        return None

unames = generateKeys()

for idx, uname in enumerate(unames):
    # selecting a random proxy every 5th attempt
    if idx % 5 == 0:
        selected_proxy = get_next_proxy()
        print(f'Switching to proxy: {selected_proxy}')
        
        chrome_options = webdriver.ChromeOptions()
        chrome_options.debugger_address = "localhost:9222"
        chrome_options.add_argument('--proxy-server=' + selected_proxy)
        service = Service("/usr/bin/chromedriver") 
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get("https://calendly.com/app/personal/link")

    wait = WebDriverWait(driver, 20)  
    input_field = wait.until(EC.presence_of_element_located((By.NAME, "slug")))
    wait.until(EC.element_to_be_clickable((By.NAME, "slug")))

    clearInput(input_field)
    sendInput(input_field, uname)
    print(waitAndCheck(driver, uname))

    # updating proxy after every 5th iteration
    if (idx + 1) % 5 == 0:
        driver.quit()

def mapTo(el):
    return "https://calendly.com/" + el

links = list(map(mapTo, available))
print(links)